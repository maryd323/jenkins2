pipeline{
   agent any
   environment {
      appName           = 'CustomHTMLEditor'
      earFileName       = 'CustomHTMLEditor.ear'
      antHome           = tool 'JenkinsAnt'
      dx_instance_name  = 'dx-deployment-0'
      app_binary_path   = '/opt/HCL/wp_profile/customApps/'
   }
   options {
      //Value needs to match the name of the downstream application deploy job created in the Jenkins console.
      copyArtifactPermission('deploy-custom-editor-app') 
   }   
   stages {
      stage('Log Entry') { 
         steps {
            script {
               openshift.withCluster() {
                  openshift.withProject() {
                     echo "Building: ${appName} in project: ${openshift.project()}."
                  }
               }
            }
         }
      }      
      stage('Checkout') { 
         steps {
            git 'http://github.com/maryd323/jenkins2.git'
         }
      }
      stage('Build') {
         steps {
               sh "'${antHome}/bin/ant' clean makezips"
         }
      }
      stage('Archive') {
         steps {
            archiveArtifacts 'build/dist/*.ear'
         }
      }      
      stage('Deliver') {
         steps {
            script {
               openshift.withCluster() {
                  openshift.withProject() {
                  def result = openshift.raw ( 'cp', '${WORKSPACE}/build/dist/${earFileName} ${dx_instance_name}:${app_binary_path}')
                  echo "Delivery Status:  ${result.out}"
                  }
               }
            }
         }
      }        
      stage('Deploy'){
         steps {
            //Value needs to match the name of the downstream application deploy job created in the Jenkins console.
            build 'deploy-custom-editor-app'
            }
      }
      stage('Log Exit') { 
         steps {
            script {
               openshift.withCluster() {
                  openshift.withProject() {
                     echo "Completed build, delivery and deployment of ${appName} in project: ${openshift.project()}."
                  }
               }
            }
         }
      }        
   }  
}
